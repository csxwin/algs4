See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
Checkstyle:   PASSED

Correctness:  12/26 tests passed
Memory:       8/8 tests passed
Timing:       9/9 tests passed

Aggregate score: 67.69%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.8K Feb 17 03:02 Percolation.java
3.3K Feb 17 03:02 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), we check the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input8.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input8-no.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input10-no.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = greeting57.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = heart25.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 2: open random sites until just before system percolates
  * n = 3
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 5
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 20
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 20
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 3: open predetermined sites for n = 1 and n = 2
  * filename = input1.txt
    - percolates() returns wrong value [after 1 site opened]
    - student   = false
    - reference = true
    - failed after call 1 to isOpen()
  * filename = input1-no.txt
  * filename = input2.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input2-no.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 4: check for backwash with predetermined sites
  * filename = input20.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input10.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input50.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = jerry47.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 5: check for backwash with predetermined sites that have
        multiple percolating paths
  * filename = input3.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input4.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = input7.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 6: open predetermined sites with long percolating path
  * filename = snake13.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * filename = snake101.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 7: open every site
  * filename = input5.txt
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 8: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 5
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 20
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 20
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed after call 1 to isOpen()
==> FAILED

Test 9: check that IndexOutOfBoundsException is thrown if (col, row) is out of bounds
  * n = 10, (col, row) = (0, 6)
  * n = 10, (col, row) = (12, 6)
  * n = 10, (col, row) = (11, 6)
  * n = 10, (col, row) = (6, 0)
  * n = 10, (col, row) = (6, 12)
  * n = 10, (col, row) = (6, 11)
==> passed

Test 10: check that IllegalArgumentException is thrown if n <= 0 in constructor
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 11: create multiple Percolation objects at the same time
         (to make sure you didn't store data in static variables)
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
==> FAILED

Test 12: open predetermined list of sites using file inputs,
         but change the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 13: call all methods in random order until just before system percolates
  * n = 3
    - numberOfOpenSites() returns wrong value [after 3 sites opened]
    - student   = 0
    - reference = 3
    - failed on trial 1 of 40

  * n = 5
    - numberOfOpenSites() returns wrong value [after 3 sites opened]
    - student   = 0
    - reference = 3
    - failed on trial 1 of 20

  * n = 7
    - numberOfOpenSites() returns wrong value [after 2 sites opened]
    - student   = 0
    - reference = 2
    - failed on trial 1 of 10
    - sequence of operations was:
         percolation.isOpen(i, j) for each i and j
         percolation.isFull(i, j) for each i and j
         percolation.isFull(i, j) for each i and j
         percolation.open(7, 2)
         percolation.isFull(i, j) for each i and j
         percolation.isFull(i, j) for each i and j
         percolation.percolates()
         percolation.isFull(i, j) for each i and j
         percolation.open(6, 3)
         percolation.percolates()
         percolation.percolates()
         percolation.numberOfOpenSites()

  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 5
    - sequence of operations was:
         percolation.isFull(i, j) for each i and j
         percolation.percolates()
         percolation.isFull(i, j) for each i and j
         percolation.numberOfOpenSites()
         percolation.percolates()
         percolation.numberOfOpenSites()
         percolation.numberOfOpenSites()
         percolation.open(3, 5)
         percolation.isFull(i, j) for each i and j
         percolation.numberOfOpenSites()

  * n = 20
    - numberOfOpenSites() returns wrong value [after 2 sites opened]
    - student   = 0
    - reference = 2
    - failed on trial 1 of 2

  * n = 50
    - numberOfOpenSites() returns wrong value [after 2 sites opened]
    - student   = 0
    - reference = 2
    - failed on trial 1 of 1
    - sequence of operations was:
         percolation.isFull(i, j) for each i and j
         percolation.percolates()
         percolation.numberOfOpenSites()
         percolation.numberOfOpenSites()
         percolation.numberOfOpenSites()
         percolation.open(30, 9)
         percolation.isOpen(i, j) for each i and j
         percolation.open(41, 45)
         percolation.percolates()
         percolation.numberOfOpenSites()

==> passed

Test 14: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 40
  * n = 5
    - numberOfOpenSites() returns wrong value [after 3 sites opened]
    - student   = 0
    - reference = 3
    - failed on trial 1 of 20
  * n = 7
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 10
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 5
  * n = 20
    - numberOfOpenSites() returns wrong value [after 3 sites opened]
    - student   = 0
    - reference = 3
    - failed on trial 1 of 2
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 1
==> FAILED

Test 15: call all methods in random order until all sites are open,
         allowing open() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - numberOfOpenSites() returns wrong value [after 2 sites opened]
    - student   = 0
    - reference = 2
    - failed on trial 1 of 40
  * n = 5
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 20
  * n = 7
    - numberOfOpenSites() returns wrong value [after 2 sites opened]
    - student   = 0
    - reference = 2
    - failed on trial 1 of 10
  * n = 10
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 5
  * n = 20
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 2
  * n = 50
    - numberOfOpenSites() returns wrong value [after 1 site opened]
    - student   = 0
    - reference = 1
    - failed on trial 1 of 1
==> FAILED


Total: 4/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 11 total tests.

Test 1: Test that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: Test that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: Test that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Test that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats mean = 0.5915
    - total calls to open() / (N*N*T) = 0.5890000000000001
  * n =  50, trials =  20
    - PercolationStats mean = 0.5964200000000001
    - total calls to open() / (N*N*T) = 0.59602
  * n = 100, trials =  50
    - PercolationStats mean = 0.591682
    - total calls to open() / (N*N*T) = 0.591582
  * n =  64, trials = 150
    - PercolationStats mean = 0.5946695963541667
    - total calls to open() / (N*N*T) = 0.5944254557291667
==> FAILED

Test 5: Test that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: Test that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: Check whether exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
==> passed

Test 8: Create two PercolationStats objects at the same time and check mean()
        (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
    - PercolationStats object 1 mean = 0.58572
    - total calls to open() / (N1*N1*T1)  = 0.5853200000000001
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 0.58696
    - total calls to open() / (N1*N1*T1)  = 0.5865600000000001
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
    - PercolationStats object 1 mean = 0.58972
    - total calls to open() / (N1*N1*T1)  = 0.5893200000000001
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 0.58272
    - total calls to open() / (N1*N1*T1)  = 0.5811200000000001
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
    - PercolationStats object 1 mean = 0.5940799999999999
    - total calls to open() / (N1*N1*T1)  = 0.59368
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 0.5890666666666662
    - total calls to open() / (N1*N1*T1)  = 0.5846222222222219
==> FAILED

Test 9: Check that the methods return the same value, regardless of
        the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: Check for any calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 11: Check distribution of number of sites opened until percolation
  * n = 2, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                2         0   33333.0          0.00
                3     33084   66667.0     -46361.29
        -------------------------------------------
                      33084  100000.0     -46361.29
    
    G-statistic = -46361.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                3         0    3571.0          0.00
                4      3541   13889.0      -9678.88
                5     14997   29365.0     -20154.57
                6     31422   32937.0      -2959.22
                7     32122   20238.0      29679.39
        -------------------------------------------
                      82082  100000.0      -3113.29
    
    G-statistic = -3113.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                4         0     220.0          0.00
                5       209    1154.0       -714.22
                6      1157    3497.0      -2559.46
                7      3738    7822.0      -5520.20
                8      8272   13850.0      -8526.93
                9     14780   19542.0      -8255.84
               10     20425   21522.0      -2137.11
               11     21694   17924.0       8282.56
               12     17333   10733.0      16615.04
               13      9533    3736.0      17859.96
        -------------------------------------------
                      97141  100000.0      15043.80
    
    G-statistic = 15043.80 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


==> FAILED


Total: 8/11 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Memory usage as a function of trials for n = 100
            (max allowed: 8*trials + 128 bytes)

            trials        bytes
--------------------------------------------
=> passed       16          184         
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 56.00   (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        49336         
=> passed      256       786616         
=> passed      512      3145912         
=> passed     1024     12583096         
==> 4/4 tests passed


Estimated student memory = 12.00 n^2 + 0.00 n + 184.00   (R^2 = 1.000)


Test 2 (bonus): Check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
   -  failed memory test for n = 192
==> FAILED


Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Test 1a-1e: Create an n-by-n percolation system; open sites at random until
            the system percolates. Count calls to connected(), union() and
            find() in WeightedQuickUnionUF.
                                                 2 * connected()
                 n   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=> passed        8     0.00           66                   250                   1         
=> passed       32     0.00          760                  3092                   1         
=> passed      128     0.01        11294                 48006                   1         
=> passed      512     0.04       185343                785726                   1         
=> passed     1024     0.11       728916               3100964                   1         
==> 5/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: Check whether number of calls to union(), connected(), and find()
             is a constant per call to open(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isFull(), and
             percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> passed       32        4               0               1               1         
=> passed      128        4               0               1               1         
=> passed      512        4               0               1               1         
=> passed     1024        4               0               1               1         
==> 4/4 tests passed

Total: 9/9 tests passed!

================================================================
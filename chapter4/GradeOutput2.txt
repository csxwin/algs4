See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (10 warnings)
PMD:          FAILED (13 warnings)
Checkstyle:   FAILED (0 errors, 32 warnings)

Correctness:  28/47 tests passed
Memory:       3/13 tests passed
Timing:       77/125 tests passed

Aggregate score: 60.37%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.2K Aug 27 14:17 Board.java
7.6K Aug 27 14:17 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.Priority' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.Moves' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.SearchBoard' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.PreviousNode' doesn't start with a lower-case letter.  In Solver.java
M C SCRV_SUSPICIOUS_COMPARATOR_RETURN_VALUES SCRV: Comparator method Solver$1.compare(Solver$SearchNode, Solver$SearchNode) doesn't seem to return all ordering values  At Solver.java:[line 136]
M B BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS BC: The 'equals()' method for 'Board' assumes the argument is of type 'Board'; it should be of type 'java.lang.Object'.  At Board.java:[line 164]
L D NS_NON_SHORT_CIRCUIT NS: Questionable use of a non-short-circuit logic operator ('&' or '|'). Did you mean to use '&&' or '||' instead?  At Board.java:[line 121]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Board.java:[line 191]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Solver.java:[line 175]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'Solver$1' be refactored into a named static nested class?  At Solver.java:[lines 132-142]
Warnings generated: 10


================================================================


% pmd *.java
*-----------------------------------------------------------
Board.java:4: You should not need to define more than one array instance variable in this program. [AtMostOneArrayInstanceVariable]
Board.java:5: The private instance (or static) variable 'initBlocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:12: The private instance (or static) variable 'dimension' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:13: The private instance (or static) variable 'numOfBlocksOutOfSpace' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:14: The private instance (or static) variable 'sumOfManhattanDistance' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:15: The private instance (or static) variable 'blankX' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:16: The private instance (or static) variable 'blankY' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:188: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
Solver.java:10: The private instance (or static) variable 'pQueue' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:11: The private instance (or static) variable 'pQueueTwin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:12: The private instance (or static) variable 'solutionStack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:13: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:172: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 13 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:5:35: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:6:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:7:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:8:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:9:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:39:23: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:164:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Board.java:164:57: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:188:43: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:188:43: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:215:11: The comment is empty. [IllegalTokenText]
[WARN] Board.java:225:11: The comment is empty. [IllegalTokenText]
[WARN] Board.java:237:15: The local variable 'ReferenceBoard' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:17:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Solver.java:18:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Solver.java:31:32: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:32:36: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:108:20: The instance (or static) variable 'Priority' must be private. [VisibilityModifier]
[WARN] Solver.java:108:20: The instance variable 'Priority' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:109:20: The instance (or static) variable 'Moves' must be private. [VisibilityModifier]
[WARN] Solver.java:109:20: The instance variable 'Moves' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:110:22: The instance (or static) variable 'SearchBoard' must be private. [VisibilityModifier]
[WARN] Solver.java:110:22: The instance variable 'SearchBoard' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:111:27: The instance (or static) variable 'PreviousNode' must be private. [VisibilityModifier]
[WARN] Solver.java:111:27: The instance variable 'PreviousNode' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:129:36: The method 'SearchNodeOrder' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] Solver.java:172:43: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Solver.java:172:43: '}' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 28 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:164:39: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
[WARN] Board.java:164:68: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:10:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
[WARN] Solver.java:11:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    - twin() doesn't return a twin
        2
         3  2 
         0  1 


    - failed on trial 4 of 1000

  * 3-by-3
    - twin() doesn't return a twin
        3
         3  7  5 
         8  6  0 
         4  1  2 


    - failed on trial 2 of 1000

  * 4-by-4
    - twin() doesn't return a twin
        4
        12 11  2 15 
         8  1  7  5 
         4 14  6 10 
         0  9  3 13 


    - failed on trial 14 of 1000

  * 5-by-5
    - twin() doesn't return a twin
        5
         7 21  0  1  3 
        11 24 23  4 20 
        13  5  2 14 19 
        15  9 22 17  8 
         6 18 10 12 16 


    - failed on trial 6 of 1000

  * 9-by-9
    - twin() doesn't return a twin
        9
        51  9 16 55 18 29 33 75 15 
        70 50 22 21 49  6 44 65 26 
         2 13 46 74 71  5 40 62 77 
        11 17 34 38 64 69 27 20 12 
        23 35 67 36 59 28 72 14 10 
         8 30 32  0 41 37 25 42 31 
        24 76 39 57 56 47 68 66  3 
        45 80 19 78 63 61  1 54 58 
         4 73 60 79 48 52  7 43 53 


    - failed on trial 23 of 100

  * 10-by-10
    - twin() doesn't return a twin
        10
        22 38 18 99 89  6 57 88 12 11 
        15 30 53 32 41 74 14 31 63 27 
        21 24 56 79 35  4 49 37 95  5 
        68 19 93  3 97 54 80 84 40  8 
        66 98  0 44 26 65 86 59 73 33 
        23 58 81 91 28 64 82 55 47 67 
        75 62 85 42 96 76 70 51 69 16 
         9 45 71 13 83 20 60 25 77 50 
        29 90 34 10 78 43  7 72  2 52 
        94 61 92 46 17  1 39 36 48 87 


    - failed on trial 7 of 10

==> FAILED

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
    java.lang.ClassCastException: java.lang.String cannot be cast to Board

    Board.equals(Board.java:164)
    TestBoard.test10a(TestBoard.java:981)
    TestBoard.main(TestBoard.java:1411)

    - cannot check for equality with a String object

  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> FAILED

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
    - failed after 9 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65  0 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - neighbor 0 in last  call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * puzzle20.txt
    - failed after 3 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         1  6  4 
         7  8  0 
         2  3  5 

    - neighbor 0 in last  call to neighbors() =
        3
         1  6  4 
         7  0  8 
         2  3  5 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * puzzle30.txt
    - failed after 5 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  0  2 

    - neighbor 0 in last  call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  2  0 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * 2-by-2
    - failed after 29 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        2
         1  2 
         3  0 

    - neighbor 0 in last  call to neighbors() =
        2
         1  2 
         0  3 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

  * 3-by-3
    - failed after 15 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         6  3  8 
         7  5  4 
         2  0  1 

    - neighbor 0 in last  call to neighbors() =
        3
         6  3  8 
         7  5  4 
         0  2  1 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

  * 4-by-4
    - failed after 5 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        4
        12  8  9  5 
         3 15 11 14 
         4 13  7  0 
        10  1  2  6 

    - neighbor 0 in last  call to neighbors() =
        4
        12  8  9  5 
         3 15 11 14 
         4 13  0  7 
        10  1  2  6 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

==> FAILED

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 19/22 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> FAILED     2           664                  128
=> FAILED     3           984                  192
=> FAILED     4          1224                  240
=> FAILED     8          2824                  560
=> FAILED    12          5064                 1008
=> FAILED    16          7944                 1584
=> FAILED    20         11464                 2288
=> FAILED    37         34304                 6856
=> FAILED    72        115464                23088
=> FAILED   120        307464                61488
==> 0/10 tests passed

Total: 0/10 tests passed!

Student   memory = 20.00 n^2 + 160.00 n + 264.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        3
         1  0  2 
         7  5  4 
         8  6  3 
  * puzzle12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 
  * puzzle13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        4
         2  3  4  8 
         1  6  0 12 
         5 10  7 11 
         9 13 14 15 
==> FAILED

Test 1b: call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test1b(TestSolver.java:638)
    TestSolver.main(TestSolver.java:932)

  * puzzle12.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test1b(TestSolver.java:638)
    TestSolver.main(TestSolver.java:932)

  * puzzle13.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test1b(TestSolver.java:638)
    TestSolver.main(TestSolver.java:932)

==> FAILED

Test 2a: call moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 
  * puzzle15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        8
         1  2  3  4  5  6  7  8 
         9 10 11 12 13 14 15 16 
        17 18 19 20 21 22 23 24 
         0 25 27 28 29 30 31 32 
        34 26 35 36 37 38 39 40 
        33 41 42 43 45 46 47 48 
        49 50 51 44 61 53 54 56 
        57 58 59 52 60 62 55 63 
  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 
  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 
  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        3
         5  6  2 
         1  8  4 
         7  3  0 
  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        3
         1  2  7 
         0  4  3 
         6  5  8 
  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        3
         1  6  4 
         7  0  8 
         2  3  5 
  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        3
         5  2  3 
         4  7  0 
         8  6  1 
  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        3
         4  8  2 
         3  6  5 
         1  7  0 
  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        3
         5  0  4 
         2  3  8 
         7  1  6 
  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        3
         5  7  4 
         3  0  8 
         1  6  2 
  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        3
         2  8  5 
         3  6  1 
         7  0  4 
  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        3
         5  7  0 
         3  2  8 
         1  6  4 
  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        3
         5  8  7 
         1  4  6 
         3  0  2 
  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        3
         7  8  5 
         4  0  2 
         3  6  1 
  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        3
         6  0  5 
         8  7  4 
         3  2  1 
  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        3
         8  4  7 
         1  5  6 
         3  2  0 
  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 31
    - board =
        3
         8  6  7 
         2  5  4 
         3  0  1 
==> FAILED

Test 2b: call solution() with more file inputs
  * puzzle14.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle15.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle16.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle17.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle18.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle19.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle20.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle21.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle22.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle23.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle24.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle25.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle26.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle27.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle28.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle29.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle30.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

  * puzzle31.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test2b(TestSolver.java:664)
    TestSolver.main(TestSolver.java:938)

==> FAILED

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 7
    - board =
        3
         1  3  6 
         4  5  2 
         7  0  8 
    - failed on trial 36 of 1000

==> FAILED

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:278)
    TestSolver.test3b(TestSolver.java:685)
    TestSolver.main(TestSolver.java:944)

    - failed on trial 54 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8 
         2  7  3 
         4  0  6 
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null
  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null
  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null
  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null
  * puzzle4x4-unsolvable.txt
    - student solution() does not return null
==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
    - number of student   entries = 1
    - number of reference entries = 0
    - failed after 1 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle3x3-01.txt
    - number of student   entries = 2
    - number of reference entries = 0
    - failed after 1 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle3x3-05.txt
    - number of student   entries = 6
    - number of reference entries = 0
    - failed after 3 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 5
          solver.isSolvable() -> true
          solver.solution()
  * puzzle3x3-10.txt
    - number of student   entries = 11
    - number of reference entries = 0
    - failed after 4 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 10
          solver.moves() -> 10
          solver.moves() -> 10
          solver.solution()
  * random 2-by-2 solvable boards
    - number of student   entries = 2
    - number of reference entries = 0
    - failed after 2 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> true
          solver.solution()
    - failed on trial 1 of 10

==> FAILED

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check whether equals() method in Board is called
         with an argument of the wrong type
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: Check whether equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        3
         1  3  5 
         7  2  6 
         8  0  4 
  * puzzle3x3-12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        3
         4  1  2 
         3  0  6 
         5  7  8 
  * puzzle3x3-13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        3
         4  3  1 
         0  7  2 
         8  5  6 
  * puzzle3x3-14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        3
         3  4  6 
         2  0  8 
         1  7  5 
  * puzzle3x3-15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        3
         2  0  8 
         1  3  5 
         4  6  7 
  * puzzle3x3-16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        3
         5  2  1 
         4  8  3 
         7  6  0 
  * puzzle3x3-17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        3
         4  3  1 
         0  2  6 
         7  8  5 
  * puzzle3x3-18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        3
         1  4  3 
         7  0  8 
         6  5  2 
  * puzzle3x3-19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        3
         7  0  4 
         8  5  1 
         6  3  2 
  * puzzle3x3-20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        3
         7  4  3 
         2  8  6 
         0  5  1 
  * puzzle3x3-21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        3
         8  7  2 
         1  5  0 
         4  6  3 
  * puzzle3x3-22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        3
         5  3  6 
         4  0  7 
         1  8  2 
  * puzzle3x3-23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        3
         6  0  8 
         4  3  5 
         1  2  7 
  * puzzle3x3-24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        3
         6  5  3 
         4  1  7 
         0  2  8 
  * puzzle3x3-25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        3
         8  3  5 
         6  4  2 
         1  0  7 
  * puzzle3x3-26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        3
         4  8  7 
         5  3  1 
         0  6  2 
  * puzzle3x3-27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        3
         1  6  4 
         0  3  5 
         8  2  7 
  * puzzle3x3-28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        3
         6  3  8 
         5  4  1 
         7  2  0 
  * puzzle3x3-29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        3
         1  8  5 
         0  2  4 
         3  6  7 
  * puzzle3x3-30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        3
         8  6  7 
         2  0  4 
         3  5  1 
==> FAILED

Test 12b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-12.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-13.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-14.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-15.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-16.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-17.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-18.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-19.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-20.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-21.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-22.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-23.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-24.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-25.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-26.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-27.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-28.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-29.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

  * puzzle3x3-30.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test12b(TestSolver.java:860)
    TestSolver.main(TestSolver.java:989)

==> FAILED

Test 13a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        4
         5  1  3  4 
         9  2  7  8 
        13  0 10 12 
        14  6 11 15 
  * puzzle4x4-12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        4
         5  1  2  4 
         9  6  3  7 
        13 10  0  8 
        14 15 11 12 
  * puzzle4x4-13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        4
         5  3  4  8 
         2  1  0  7 
         9  6 10 11 
        13 14 15 12 
  * puzzle4x4-14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        4
         1  2  8  3 
         5 11  6  4 
         0 10  7 12 
         9 13 14 15 
  * puzzle4x4-15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        4
         5  1  3  4 
        13  2  7  8 
         6 10 11 12 
        14  9  0 15 
  * puzzle4x4-16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        4
         5  1  2  4 
         6  0 10  7 
        13 11  3  8 
        14  9 15 12 
  * puzzle4x4-17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        4
         5  2  4  0 
         6  1  3  8 
        13 11  7 12 
        10  9 14 15 
  * puzzle4x4-18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        4
         2  5  3  4 
         1  7 11  8 
         9  6  0 12 
        13 14 15 10 
  * puzzle4x4-19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        4
         3  7  2  4 
         1  5 10  8 
         6  0 11 12 
         9 13 14 15 
  * puzzle4x4-20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        4
         6  3  7  4 
         2  9 10  8 
         1  5 12 15 
        13  0 14 11 
  * puzzle4x4-21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        4
         3  7  1  0 
         6  2  8  4 
         5 10 11 12 
         9 13 14 15 
  * puzzle4x4-22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        4
         1  4  8  3 
         7  2 10 11 
         5  6  0 15 
         9 13 14 12 
  * puzzle4x4-23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        4
         1  2  3  4 
         5  6 14  8 
        13  0  9 11 
        10 12 15  7 
  * puzzle4x4-24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        4
         9  5  1  2 
         6  4  8  3 
        10 14  7 11 
        13  0 15 12 
  * puzzle4x4-25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        4
         2  5  1  3 
         9  6 12  4 
        10 14  8  0 
        13 11 15  7 
  * puzzle4x4-26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        4
         1 10  6  4 
         5  9  2  8 
        13 12  0  7 
        14 11  3 15 
  * puzzle4x4-27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        4
         1  2  3  0 
         5 12  7  4 
        13  6 14  9 
        10  8 11 15 
  * puzzle4x4-28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        4
         2  5  4  7 
         9  1  3  8 
        11 10  0  6 
        14 13 15 12 
  * puzzle4x4-29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        4
         1  8  3  0 
         5  7  4 12 
        14  6  2 15 
         9 13 10 11 
  * puzzle4x4-30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        4
         2  4  8 12 
         1  7  3 14 
         0  6 15 11 
         5  9 13 10 
==> FAILED

Test 13b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-12.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-13.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-14.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-15.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-16.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-17.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-18.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-19.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-20.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-21.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-22.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-23.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-24.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-25.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-26.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-27.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-28.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-29.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

  * puzzle4x4-30.txt
    java.lang.ArrayIndexOutOfBoundsException: 0

    TestSolver.testSolution(TestSolver.java:218)
    TestSolver.testSolution(TestSolver.java:189)
    TestSolver.test13b(TestSolver.java:884)
    TestSolver.main(TestSolver.java:995)

==> FAILED

Test 14a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
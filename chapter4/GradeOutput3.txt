See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (10 warnings)
PMD:          FAILED (13 warnings)
Checkstyle:   FAILED (0 errors, 32 warnings)

Correctness:  40/47 tests passed
Memory:       0/13 tests passed
Timing:       122/125 tests passed

Aggregate score: 80.58%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.7K Aug 27 14:32 Board.java
7.6K Aug 27 14:32 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.Priority' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.Moves' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.SearchBoard' doesn't start with a lower-case letter.  In Solver.java
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'Solver$SearchNode.PreviousNode' doesn't start with a lower-case letter.  In Solver.java
M C SCRV_SUSPICIOUS_COMPARATOR_RETURN_VALUES SCRV: Comparator method Solver$1.compare(Solver$SearchNode, Solver$SearchNode) doesn't seem to return all ordering values  At Solver.java:[line 136]
M B BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS BC: The 'equals()' method for 'Board' assumes the argument is of type 'Board'; it should be of type 'java.lang.Object'.  At Board.java:[line 164]
L D NS_NON_SHORT_CIRCUIT NS: Questionable use of a non-short-circuit logic operator ('&' or '|'). Did you mean to use '&&' or '||' instead?  At Board.java:[line 121]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Board.java:[line 191]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Solver.java:[line 175]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'Solver$1' be refactored into a named static nested class?  At Solver.java:[lines 132-142]
Warnings generated: 10


================================================================


% pmd *.java
*-----------------------------------------------------------
Board.java:4: You should not need to define more than one array instance variable in this program. [AtMostOneArrayInstanceVariable]
Board.java:5: The private instance (or static) variable 'initBlocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:12: The private instance (or static) variable 'dimension' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:13: The private instance (or static) variable 'numOfBlocksOutOfSpace' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:14: The private instance (or static) variable 'sumOfManhattanDistance' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:15: The private instance (or static) variable 'blankX' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:16: The private instance (or static) variable 'blankY' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:188: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
Solver.java:10: The private instance (or static) variable 'pQueue' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:11: The private instance (or static) variable 'pQueueTwin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:12: The private instance (or static) variable 'solutionStack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:13: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:172: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 13 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:5:35: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:6:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:7:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:8:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:9:40: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:39:23: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:164:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Board.java:164:57: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:188:43: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:188:43: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:235:3: The comment is empty. [IllegalTokenText]
[WARN] Board.java:238:3: The comment is empty. [IllegalTokenText]
[WARN] Board.java:248:3: The comment is empty. [IllegalTokenText]
[WARN] Solver.java:17:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Solver.java:18:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Solver.java:31:32: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:32:36: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:108:20: The instance (or static) variable 'Priority' must be private. [VisibilityModifier]
[WARN] Solver.java:108:20: The instance variable 'Priority' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:109:20: The instance (or static) variable 'Moves' must be private. [VisibilityModifier]
[WARN] Solver.java:109:20: The instance variable 'Moves' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:110:22: The instance (or static) variable 'SearchBoard' must be private. [VisibilityModifier]
[WARN] Solver.java:110:22: The instance variable 'SearchBoard' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:111:27: The instance (or static) variable 'PreviousNode' must be private. [VisibilityModifier]
[WARN] Solver.java:111:27: The instance variable 'PreviousNode' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:129:36: The method 'SearchNodeOrder' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] Solver.java:172:43: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Solver.java:172:43: '}' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 28 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:164:39: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
[WARN] Board.java:164:68: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:10:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
[WARN] Solver.java:11:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [MyIllegalType]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
    - twin() doesn't return a twin
        4
         2  0  3  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 


  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
    - twin() doesn't return a twin
        2
         1  0 
         2  3 


==> FAILED

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    - twin() doesn't return a twin
        2
         2  0 
         3  1 


    - failed on trial 6 of 1000

  * 3-by-3
    - twin() doesn't return a twin
        3
         5  1  2 
         4  3  0 
         7  6  8 


    - failed on trial 1 of 1000

  * 4-by-4
    - twin() doesn't return a twin
        4
        15  9  8 10 
         6  0 13 11 
        12  5 14  3 
         1  7  2  4 


    - failed on trial 3 of 1000

  * 5-by-5
    - twin() doesn't return a twin
        5
        23  3 20  1 18 
         5  8 17  7  9 
        16 21 22 15 10 
         4 19 24 12 11 
         2 14  0  6 13 


    - failed on trial 6 of 1000

  * 9-by-9
    - twin() doesn't return a twin
        9
        80 72  7  0 68 58 47 66 62 
        12 70 32 46 13  9 34 16 55 
        59 41 27 50 36 21  1 38 22 
        63  8 11 67 26 75 65 19 10 
        20 73 23 54 33 69 31 42 60 
        29 74 24 45 40 56 14 78 17 
        53 28 15 35  5 44 48 79 76 
        71 49 52  4 18 61 25 39 77 
        37  3 57 30 43  6  2 51 64 


    - failed on trial 8 of 100

  * 10-by-10
==> FAILED

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
    java.lang.ClassCastException: java.lang.String cannot be cast to Board

    Board.equals(Board.java:164)
    TestBoard.test10a(TestBoard.java:981)
    TestBoard.main(TestBoard.java:1411)

    - cannot check for equality with a String object

  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> FAILED

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
    - failed after 20 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65  0 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - neighbor 0 in last  call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * puzzle20.txt
    - failed after 14 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         1  6  4 
         7  8  0 
         2  3  5 

    - neighbor 0 in last  call to neighbors() =
        3
         1  6  4 
         7  0  8 
         2  3  5 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * puzzle30.txt
    - failed after 15 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  0  2 

    - neighbor 0 in last  call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  2  0 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * 2-by-2
    - failed after 6 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        2
         2  3 
         0  1 

    - neighbor 0 in last  call to neighbors() =
        2
         2  3 
         1  0 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

  * 3-by-3
    - failed after 3 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        3
         7  2  3 
         1  6  4 
         5  0  8 

    - neighbor 0 in last  call to neighbors() =
        3
         7  2  3 
         1  6  4 
         5  8  0 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

  * 4-by-4
    - failed after 15 calls to random methods in Board
    - neighbor 0 in first call to neighbors() =
        4
         1  7  8  3 
        13  4  0 14 
         2 12  9  6 
         5 15 11 10 

    - neighbor 0 in last  call to neighbors() =
        4
         1  7  8  3 
        13  0  4 14 
         2 12  9  6 
         5 15 11 10 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

    - failed on trial 1 of 100

==> FAILED

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 18/22 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> FAILED     2           664                  128
=> FAILED     3           984                  192
=> FAILED     4          1224                  240
=> FAILED     8          2824                  560
=> FAILED    12          5064                 1008
=> FAILED    16          7944                 1584
=> FAILED    20         11464                 2288
=> FAILED    37         34304                 6856
=> FAILED    72        115464                23088
=> FAILED   120        307464                61488
==> 0/10 tests passed

Total: 0/10 tests passed!

Student   memory = 20.00 n^2 + 160.00 n + 264.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: call solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null
  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null
  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null
  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null
  * puzzle4x4-unsolvable.txt
    - student solution() does not return null
==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
    - number of student   entries = 1
    - number of reference entries = 0
    - failed after 1 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle3x3-01.txt
    - number of student   entries = 2
    - number of reference entries = 0
    - failed after 4 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> true
          solver.moves() -> 1
          solver.isSolvable() -> true
          solver.solution()
  * puzzle3x3-05.txt
    - number of student   entries = 6
    - number of reference entries = 0
    - failed after 10 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.moves() -> 5
          solver.isSolvable() -> true
          solver.isSolvable() -> true
          solver.isSolvable() -> true
          solver.isSolvable() -> true
          solver.moves() -> 5
          solver.moves() -> 5
          solver.moves() -> 5
          solver.moves() -> 5
          solver.solution()
  * puzzle3x3-10.txt
    - number of student   entries = 11
    - number of reference entries = 0
    - failed after 4 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> true
          solver.isSolvable() -> true
          solver.moves() -> 10
          solver.solution()
  * random 2-by-2 solvable boards
    - number of student   entries = 4
    - number of reference entries = 0
    - failed after 1 calls to random methods in Solver
    - first and last call to student solution() returned different iterables
    - 'student' means value after first call and 'reference' means value after last call
    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
    - failed on trial 1 of 10

==> FAILED

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check whether equals() method in Board is called
         with an argument of the wrong type
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: Check whether equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: call solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 22/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 93280 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 19.05
==> FAILED

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 1261168 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 208.25
==> FAILED

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 5732288 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 794.39
==> FAILED


Total: 0/3 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.00 
=> passed  puzzle23.txt      23    3     0.02 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.00 
=> passed  puzzle28.txt      28    3     0.02 
=> passed  puzzle30.txt      30    3     0.04 
=> passed  puzzle31.txt      31    3     0.03 
=> passed  puzzle39.txt      39    4     0.23 
=> passed  puzzle41.txt      41    5     0.04 
=> passed  puzzle34.txt      34    4     0.18 
=> passed  puzzle37.txt      37    4     0.08 
=> passed  puzzle44.txt      44    5     0.08 
=> passed  puzzle32.txt      32    4     0.28 
=> passed  puzzle35.txt      35    4     0.19 
=> passed  puzzle33.txt      33    4     0.28 
=> passed  puzzle43.txt      43    4     0.40 
=> passed  puzzle46.txt      46    4     0.26 
=> passed  puzzle40.txt      40    4     0.22 
=> passed  puzzle36.txt      36    4     1.41 
=> passed  puzzle45.txt      45    4     0.72 
==> 25/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt        621              378              245         
=> passed  puzzle22.txt       2290             1358              934         
=> passed  puzzle21.txt       1997             1188              811         
=> passed  puzzle23.txt       4452             2646             1808         
=> passed  puzzle24.txt       5834             3540             2296         
=> passed  puzzle25.txt       8525             5064             3463         
=> passed  puzzle27.txt      11417             6934             4485         
=> passed  puzzle29.txt      13078             8002             5078         
=> passed  puzzle26.txt       4689             2860             1831         
=> passed  puzzle28.txt      22277            13536             8743         
=> passed  puzzle30.txt      38891            23670            15223         
=> passed  puzzle31.txt      39366            24236            15132         
=> FAILED  puzzle39.txt     241214   (2.3x)  118066   (2.2x)  123150   (2.3x)
=> passed  puzzle41.txt      34501            14780            19723         
=> passed  puzzle34.txt     187728            90538            97192         
=> passed  puzzle37.txt      96422            46302            50122         
=> passed  puzzle44.txt     108777            49260            59519         
=> passed  puzzle32.txt     496373           237484           258891         
=> passed  puzzle35.txt     352258           174680           177580         
=> passed  puzzle33.txt     502396           242432           259966         
=> passed  puzzle43.txt     717761           353118           364645         
=> passed  puzzle46.txt     482306           244242           238066         
=> passed  puzzle40.txt     403237           199500           203739         
=> passed  puzzle36.txt    2054074           999822          1054254         
=> passed  puzzle45.txt    1301909           643758           658153         
==> 24/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4a: count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt        995                 985                 998         
=> passed  puzzle22.txt       3644                3638                3647         
=> passed  puzzle21.txt       3181                3173                3184         
=> passed  puzzle23.txt       7094                7086                7097         
=> passed  puzzle24.txt       9370                9360                9373         
=> passed  puzzle25.txt      13585               13577               13588         
=> passed  puzzle27.txt      18347               18339               18350         
=> passed  puzzle29.txt      21076               21068               21079         
=> passed  puzzle26.txt       7545                7539                7548         
=> passed  puzzle28.txt      35809               35799               35812         
=> passed  puzzle30.txt      62557               62551               62560         
=> passed  puzzle31.txt      63598               63590               63601         
=> FAILED  puzzle39.txt     359276   (2.2x)     359268   (2.2x)     359279         
=> passed  puzzle41.txt      49277               49267               49280         
=> passed  puzzle34.txt     278262              278256              278265         
=> passed  puzzle37.txt     142720              142712              142723         
=> passed  puzzle44.txt     158033              158023              158036         
=> passed  puzzle32.txt     733853              733843              733856         
=> passed  puzzle35.txt     526934              526924              526937         
=> passed  puzzle33.txt     744824              744816              744827         
=> passed  puzzle43.txt    1070875             1070867             1070878         
=> passed  puzzle46.txt     726544              726536              726547         
=> passed  puzzle40.txt     602733              602727              602736         
=> passed  puzzle36.txt    3053892             3053882             3053895         
=> passed  puzzle45.txt    1945663             1945655             1945666         
==> 24/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt        995                 985                 998         
=> passed  puzzle22.txt       3644                3638                3647         
=> passed  puzzle21.txt       3181                3173                3184         
=> passed  puzzle23.txt       7094                7086                7097         
=> passed  puzzle24.txt       9370                9360                9373         
=> passed  puzzle25.txt      13585               13577               13588         
=> passed  puzzle27.txt      18347               18339               18350         
=> passed  puzzle29.txt      21076               21068               21079         
=> passed  puzzle26.txt       7545                7539                7548         
=> passed  puzzle28.txt      35809               35799               35812         
=> passed  puzzle30.txt      62557               62551               62560         
=> passed  puzzle31.txt      63598               63590               63601         
=> FAILED  puzzle39.txt     359276   (2.2x)     359268   (2.2x)     359279   (2.2x)
=> passed  puzzle41.txt      49277               49267               49280         
=> passed  puzzle34.txt     278262              278256              278265         
=> passed  puzzle37.txt     142720              142712              142723         
=> passed  puzzle44.txt     158033              158023              158036         
=> passed  puzzle32.txt     733853              733843              733856         
=> passed  puzzle35.txt     526934              526924              526937         
=> passed  puzzle33.txt     744824              744816              744827         
=> passed  puzzle43.txt    1070875             1070867             1070878         
=> passed  puzzle46.txt     726544              726536              726547         
=> passed  puzzle40.txt     602733              602727              602736         
=> passed  puzzle36.txt    3053892             3053882             3053895         
=> passed  puzzle45.txt    1945663             1945655             1945666         
==> 24/25 tests passed


Total: 122/125 tests passed!


================================================================
See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (6 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 20 warnings)

Correctness:  31/36 tests passed
Memory:       16/16 tests passed
Timing:       28/42 tests passed

Aggregate score: 85.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.7K Oct 16 04:51 KdTree.java
4.7K Oct 16 04:51 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L B NM_FIELD_NAMING_CONVENTION Nm: The field name 'KdTree$Node.IsVertical' doesn't start with a lower-case letter.  In KdTree.java
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At KdTree.java:[line 81]
M D DMI_HARDCODED_ABSOLUTE_FILENAME DMI: Contains a hard-coded reference to an absolute pathname.  At KdTree.java:[line 298]
M D DMI_HARDCODED_ABSOLUTE_FILENAME DMI: Contains a hard-coded reference to an absolute pathname.  At PointSET.java:[line 124]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At PointSET.java:[line 86]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[line 247]
Warnings generated: 6


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:138: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:244: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PointSET.java:10: The private instance (or static) variable 'pointSET' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:83: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:21:22: The instance variable 'IsVertical' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:244:39: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:244:39: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:299:12: 'while' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:315:14: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:316:28: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [IllegalTokenText]
[WARN] KdTree.java:324:16: The local variable 'F' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:325:29: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [IllegalTokenText]
[WARN] PointSET.java:83:39: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] PointSET.java:83:39: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] PointSET.java:125:12: 'while' is not followed by whitespace. [WhitespaceAround]
[WARN] PointSET.java:146:14: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] PointSET.java:152:15: The local variable 'F' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 13 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:51:31: The numeric literal '0.01' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:108:26: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] PointSET.java:108:49: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:259:32: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:263:49: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:268:40: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:276:41: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 4 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 1 of 1000
    - student   nearest()    = (0.0, 0.0)
    - reference nearest()    = null
    - (0.0, 0.0) was not inserted into data structure
    - student   distanceTo() = 0.5684441047775477

  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 5 of 1000
    - student   nearest()    = (0.0, 0.0)
    - reference nearest()    = null
    - (0.0, 0.0) was not inserted into data structure
    - student   distanceTo() = 0.9210620463757726

==> FAILED

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 7/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
    java.lang.IllegalArgumentException: 

    KdTree.rangeHelper(KdTree.java:198)
    KdTree.range(KdTree.java:230)
    TestKdTree.checkRange(TestKdTree.java:528)
    TestKdTree.checkRange(TestKdTree.java:480)
    TestKdTree.test3a(TestKdTree.java:1329)
    TestKdTree.main(TestKdTree.java:1639)

  * input1.txt
  * input5.txt
  * input10.txt
==> FAILED

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point            = (0.59, 0.74)
    - student   nearest()    = (0.4, 0.7)
    - reference nearest()    = (0.4, 0.7)
    - student   distanceTo() = 0.19416487838947594
    - reference distanceTo() = 0.19416487838947594
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D E 
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B D E 

  * input10.txt
    - failed on trial 4 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point            = (0.92, 0.02)
    - student   nearest()    = (0.499, 0.208)
    - reference nearest()    = (0.499, 0.208)
    - student   distanceTo() = 0.46106940909151634
    - reference distanceTo() = 0.46106940909151634
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A C D B G J H I 
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B G J H I 

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.25 0.375
      B  0.5 0.0
      C  0.0 0.125
      D  0.625 0.5
      E  0.875 0.75
    - query point            = (0.375, 1.0)
    - student   nearest()    = (0.625, 0.5)
    - reference nearest()    = (0.625, 0.5)
    - student   distanceTo() = 0.5590169943749475
    - reference distanceTo() = 0.5590169943749475
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A C B D E 
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B D E C 

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 7 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.875 0.3125
      B  0.625 0.75
      C  0.8125 0.6875
      D  0.4375 0.375
      E  0.75 0.1875
      F  0.1875 0.5
      G  0.3125 0.0625
      H  0.375 0.625
      I  0.9375 0.8125
      J  0.6875 0.5625
    - query point            = (0.25, 0.4375)
    - student   nearest()    = (0.1875, 0.5)
    - reference nearest()    = (0.1875, 0.5)
    - student   distanceTo() = 0.08838834764831845
    - reference distanceTo() = 0.08838834764831845
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D E G F H J 
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A B C D F H J E G 

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted: 
      A  0.375 0.0
      B  0.125 0.21875
      C  0.84375 0.1875
      D  0.65625 0.75
      E  0.09375 0.6875
      F  0.1875 0.875
      G  0.96875 0.71875
      H  0.25 0.40625
      I  0.03125 0.65625
      J  0.90625 0.625
      K  0.40625 0.78125
      L  0.3125 0.59375
      M  0.28125 0.53125
      N  0.6875 0.96875
      O  0.21875 0.4375
      P  0.75 0.09375
      Q  0.875 0.25
      R  0.4375 0.5625
      S  0.5 0.3125
      T  0.625 0.375
    - query point            = (0.71875, 0.8125)
    - student   nearest()    = (0.65625, 0.75)
    - reference nearest()    = (0.65625, 0.75)
    - student   distanceTo() = 0.08838834764831845
    - reference distanceTo() = 0.08838834764831845
    - student sequence of kd-tree nodes involved in calls to distanceTo():
      A B E I F H O L M C D K R S T G N 
    - reference sequence of kd-tree nodes involved in calls to distanceTo():
      A C D G N K R S T 

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.015625, 0.484375)
    - reference entry 2 = (0.0625, 0.984375)

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.0625, 0.296875)
    - reference entry 2 = (0.1953125, 0.9140625)

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 23
    - number of reference entries = 11
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.01025390625, 0.58642578125)
    - reference entry 1 = (0.8134765625, 0.41845703125)

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
    java.lang.IllegalArgumentException: 

    KdTree.rangeHelper(KdTree.java:198)
    KdTree.range(KdTree.java:230)
    TestKdTree.checkAll(TestKdTree.java:863)
    TestKdTree.test9(TestKdTree.java:1543)
    TestKdTree.main(TestKdTree.java:1690)

    - sequence of operations was:
           st.size()  ==>  0
           st.range([0.224609375, 0.49609375] x [0.646484375, 0.8837890625])

  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: 

    KdTree.rangeHelper(KdTree.java:198)
    KdTree.range(KdTree.java:230)
    TestKdTree.checkAll(TestKdTree.java:863)
    TestKdTree.test9(TestKdTree.java:1545)
    TestKdTree.main(TestKdTree.java:1690)

    - sequence of operations was:
           st.nearest((0.0751953125, 0.4189453125))   ==>  null
           st.nearest((0.7265625, 0.4306640625))   ==>  null
           st.contains((0.8779296875, 0.72265625))  ==>  false
           st.contains((0.23046875, 0.9580078125))  ==>  false
           st.isEmpty()  ==>  true
           st.range([0.1201171875, 0.2353515625] x [0.54296875, 0.591796875])

==> FAILED

Test 10: check that two KdTree objects can be created at the same time
==> passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed


Total: 24/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          280                264
=> passed        2          376                360
=> passed        5          664                648
=> passed       10         1144               1128
=> passed       25         2584               2568
=> passed      100         9784               9768
=> passed      400        38584              38568
=> passed      800        76984              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 184.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          208                160
=> passed        2          344                288
=> passed        5          752                672
=> passed       10         1432               1312
=> passed       25         3472               3232
=> passed      100        13672              12832
=> passed      400        54472              51232
=> passed      800       108872             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 72.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1373263         
=> passed   320000    1430011         
=> passed   640000    1139168         
=> passed  1280000     938451         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     507386         
=> passed   320000     482347         
=> passed   640000     421164         
=> passed  1280000     357345         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5166         
=> passed    20000       2332         
=> passed    40000       1477         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4469         
=> passed    20000       2107         
=> passed    40000        947         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     868904               1.0              88.1              42.8               0.0         
=> passed   320000     888323               1.0              89.7              43.6               0.0         
=> passed   640000     729244               1.0              95.7              46.6               0.0         
=> passed  1280000     600265               1.0             104.1              50.8               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     543354              54.5              17.5               0.0         
=> passed    20000     559006              58.0              18.7               0.0         
=> passed    40000     540030              64.3              20.8               0.0         
=> passed    80000     501732              65.1              21.0               0.0         
=> passed   160000     453705              68.7              22.2               0.0         
=> passed   320000     408093              74.1              24.0               0.0         
=> passed   640000     342211              76.1              24.7               0.0         
=> passed  1280000     303597              80.6              26.2               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000      84469              49.4              31.1              50.1              12.1         
=> passed    20000      54562              51.7              32.6              53.3              16.2         
=> FAILED    40000      29430   (0.6x)     63.9              39.3              63.1              14.1         
=> FAILED    80000      16321   (0.8x)     57.6              35.6              58.0              16.3         
=> FAILED   160000      10606   (0.5x)     63.6              38.9              62.5              15.6         
=> FAILED   320000       5698   (0.3x)     70.3              42.7              69.6              15.9         
=> FAILED   640000       2918   (0.1x)     72.0              43.7              70.6              18.1         
=> FAILED  1280000       1494   (0.1x)     76.6              46.5              76.6              20.3         
==> 2/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000    97656                   0.0                    0.0                  1134.3   (1.4x)    730.5         
=> FAILED    20000    83154                   0.0                    0.0                  1256.4   (1.6x)    827.9         
=> FAILED    40000    66505                   0.0                    0.0                  1705.7   (2.1x)   1002.0   (1.3x)
=> FAILED    80000    32906                   0.0                    0.0                  2992.6   (3.7x)   2038.3   (2.5x)
=> FAILED   160000    23577   (0.8x)          0.0                    0.0                  3075.8   (3.8x)   2056.3   (2.6x)
=> FAILED   320000    10810   (0.5x)          0.0                    0.0                  4475.6   (5.6x)   2689.2   (3.4x)
=> FAILED   640000    12802   (0.6x)          0.0                    0.0                  4468.8   (5.6x)   3061.6   (3.8x)
=> FAILED  1280000     7101   (0.4x)          0.0                    0.0                  7913.6   (9.9x)   4630.3   (5.8x)
==> 0/8 tests passed



Total: 14/28 tests passed!


================================================================
